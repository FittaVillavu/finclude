{
Generates a human-like movement with the mouse for the given time.

Example: SleepAndMoveMouse(2000+Random(2000));
  Would move the Mouse around for 2-4 secs.
}
procedure SleepAndMoveMouse(Time: Integer);
var
  Moving: Boolean;
  mx, my: Integer;
  x, y, xv, yv: Extended;
  gx, gy: Extended;
  T: Integer;
begin
  GetMousePos(mx, my);
  x := mx;
  y := my;
  if (Random(2) = 0) then
    Moving := False
  else
    Moving := True;
  gx := 130 + Random(500);
  gy := 130 + Random(300);
  T := GetTickCount;
  repeat
    Sleep(10);
    if (Moving) then
    begin
      if (gx > x) then
        xv := xv + 0.1
      else
        xv := xv - 0.1;
      if (gy > y) then
        yv := yv + 0.1
      else
        yv := yv - 0.1;
      x := x + xv;
      y := y + yv;
      MoveMouse(Round(x), Round(y));
    end;
    if (Random(100) = 0) then
      Moving := not Moving;
    if (Random(30) = 0) then
    begin
      gx := 130 + Random(500);
      gy := 130 + Random(300);
    end;
  until (Abs(GetTickCount - T) >= Time);
end;

{
Makes the mouse go off client.

Example: MMouseOffClient('rand');
  Would move the Mouse go off the client in a random direction.
}
procedure MMouseOffClient(Direction: String);
var
  B: TBoxArray;
  P: TPoint;
  i, W, H: Integer;
begin
  GetClientDimensions(W, H);
  SetArrayLength(B, 4);
  B[0] := IntToBox(-300, -300, W, 0); //top
  B[1] := IntToBox(0, H, W, H +300); //bottom
  B[2] := IntToBox(0-300, 0, 0, H); //left
  B[3] := IntToBox(W, 0, W +300, H); //right

  case Lowercase(Direction) of
    'top': i := 0;
    'bottom':  i := 1;
    'left': i := 2;
    'right': i := 3;
    'rand', 'random': i := Random(4);
    else
      Writeln('Wrong direction');
  end;

  P := Point(RandomRange(B[i].X1, B[i].X2), RandomRange(B[i].Y1, B[i].Y2));
  Reflect.Mouse.Move(P, 0, 0);
end;

{
Checks if mouse on screen

Example: If MouseOnScreen then
           MMouseOffClient('rand');
}
function MouseOnScreen: boolean;
begin
  Result := PointInBox(getMousePnt, IntToBox(0, 0, 760, 500));
end;

{
Checks if the mouse is on screen, if not, moves the mouse out of bounds.
}
procedure mouseOffScreen;
begin
  If MouseOnScreen then
    MMouseOffClient('rand');
end;

{
Random chance of the mouse going out of bounds.
}
Procedure mightOffScreen;
begin
  If Random(10) = 0 then
    mouseOffScreen;
end;

{
Moves the compass around without nasty errors. Simple and efficent.
}
procedure randomCompass;
var
  Keys: TIntegerArray;
  I: Integer;
begin
  If (Not locPlayer.isLoggedIn)or(Failed)then
    Exit;

  Keys := [VK_RIGHT, VK_LEFT];
  I := Random(2);

  Wait(100 + random(50));
  KeyDown(Keys[I]);
  Wait(500 + random(1000));
  KeyUp(Keys[I]);
  Wait(200 + random(350));
end;

{
fInclude's antiban function.

Example: beHuman(500);
  The higher the number the less chance of doing a random action.
  Best to be used inside of a loop while waiting for a certain condition.
}
procedure beHuman(i: Integer);
begin
  If Not MouseOnScreen then
    Exit;

  Case Random(I)of
    0..3: mouseOffScreen;
    4..9: randomCompass;
    12..16: SleepAndMoveMouse(200+Random(2000));
  end;
end;

{
fInclude's afterClick function.

  Execute this after a click to generate a smooth look
}
procedure afterClick;
begin
  Case Random(20)of
    4..9: randomCompass;
    12..15: SleepAndMoveMouse(200+Random(2000));
    16..19: mouseOffScreen;
  end;
end;
